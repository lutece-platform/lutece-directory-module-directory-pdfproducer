/*
 * Copyright (c) 2002-2011, Mairie de Paris
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice
 *     and the following disclaimer.
 *
 *  2. Redistributions in binary form must reproduce the above copyright notice
 *     and the following disclaimer in the documentation and/or other materials
 *     provided with the distribution.
 *
 *  3. Neither the name of 'Mairie de Paris' nor 'Lutece' nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * License 1.0
 */
package fr.paris.lutece.plugins.directory.modules.pdfproducer.web;

import fr.paris.lutece.plugins.directory.business.Directory;
import fr.paris.lutece.plugins.directory.business.Record;
import fr.paris.lutece.plugins.directory.business.RecordHome;
import fr.paris.lutece.plugins.directory.modules.pdfproducer.business.producerconfig.ConfigProducer;
import fr.paris.lutece.plugins.directory.modules.pdfproducer.business.producerconfig.DefaultConfigProducer;
import fr.paris.lutece.plugins.directory.modules.pdfproducer.service.ConfigProducerService;
import fr.paris.lutece.plugins.directory.modules.pdfproducer.service.DirectoryPDFProducerPlugin;
import fr.paris.lutece.plugins.directory.modules.pdfproducer.service.DirectoryPDFProducerResourceIdService;
import fr.paris.lutece.plugins.directory.modules.pdfproducer.utils.PDFUtils;
import fr.paris.lutece.plugins.directory.utils.DirectoryUtils;
import fr.paris.lutece.portal.service.admin.AccessDeniedException;
import fr.paris.lutece.portal.service.rbac.RBACService;
import fr.paris.lutece.portal.service.spring.SpringContextService;
import fr.paris.lutece.portal.web.admin.PluginAdminPageJspBean;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


/**
 * DirectoryPDFJspBean
 *
 */
public class DirectoryPDFJspBean extends PluginAdminPageJspBean
{
    // JSP URL
    public static final String PROPERTY_PATH_FILES_GENERATED = "directory.zipbasket.root.path.repository.filesgenerated";

    //parameters
    public static final String PARAMETER_ID_DIRECTORY_RECORD = "id_directory_record";
    private static final ConfigProducerService _manageConfigProducerService = (ConfigProducerService) SpringContextService.getPluginBean( DirectoryPDFProducerPlugin.PLUGIN_NAME,
            "directory-pdfproducer.manageConfigProducer" );

    /**
     * Method to download a PDF file generated by directory record
     * @param request request
     * @param response response
     * @throws AccessDeniedException exception if user does not have the permission
     */
    public void doDownloadPDF( HttpServletRequest request, HttpServletResponse response )
        throws AccessDeniedException
    {
        String strIdDirectoryRecord = request.getParameter( PARAMETER_ID_DIRECTORY_RECORD );
        Record record = RecordHome.findByPrimaryKey( DirectoryUtils.convertStringToInt( strIdDirectoryRecord ),
                getPlugin(  ) );

        if ( ( record == null ) ||
                !RBACService.isAuthorized( Directory.RESOURCE_TYPE,
                    Integer.toString( record.getDirectory(  ).getIdDirectory(  ) ),
                    DirectoryPDFProducerResourceIdService.PERMISSION_GENERATE_PDF, getUser(  ) ) )
        {
            throw new AccessDeniedException(  );
        }

        int nIdConfig = _manageConfigProducerService.loadDefaultConfig( getPlugin(  ),
                DirectoryUtils.convertStringToInt( Integer.toString( record.getDirectory(  ).getIdDirectory(  ) ) ) );

        if ( ( nIdConfig == -1 ) || ( nIdConfig == 0 ) )
        {
            DefaultConfigProducer defaultConfigProducer = new DefaultConfigProducer(  );
            PDFUtils.doDownloadPDF( request, response, getPlugin(  ), defaultConfigProducer,
                _manageConfigProducerService.loadListConfigEntry( getPlugin(  ), nIdConfig ), getLocale(  ) );
        }
        else
        {
            ConfigProducer configProducer = _manageConfigProducerService.loadConfig( getPlugin(  ), nIdConfig );
            PDFUtils.doDownloadPDF( request, response, getPlugin(  ), configProducer,
                _manageConfigProducerService.loadListConfigEntry( getPlugin(  ), nIdConfig ), getLocale(  ) );
        }
    }
}
